{"version":3,"sources":["logo.svg","data/exercises-react-sentences.js","components/exercise/exercise.component.js","App.js","reportWebVitals.js","index.js"],"names":["dataArray","id","sentence","answer","allAnswers","shuffleArray","array","i","length","j","Math","floor","random","Exercise","useState","currentStep","setCurrentStep","errorNumber","setErrorNumber","currentStepData","setCurrentStepData","useEffect","map","styleClass","error","className","onClick","console","log","newStepNumber","stepsLength","data","onAnswerClick","App","src","logo","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8MAAe,G,MAAA,IAA0B,kC,eCA5BA,EAAY,CACrB,CACIC,GAAI,EACJC,SAAU,sCACVC,OAAQ,WACRC,WAAY,CACR,WACA,SACA,YACA,UACA,UACA,UAGR,CACIH,GAAI,EACJC,SAAU,gCACVC,OAAQ,IACRC,WAAY,CAAC,IAAK,IAAK,QAE3B,CACIH,GAAI,EACJC,SACI,yEACJC,OAAQ,kBACRC,WAAY,CACR,kBACA,gBACA,gBACA,gBACA,YACA,kBAGR,CACIH,GAAI,EACJC,SAAU,6DACVC,OAAQ,cACRC,WAAY,CACR,cACA,cACA,gBACA,cACA,YACA,oBAGR,CACIH,GAAI,EACJC,SACI,sOACJC,OAAQ,gBACRC,WAAY,CACR,cACA,cACA,gBACA,cACA,YACA,oBAGR,CACIH,GAAI,EACJC,SACI,4KACJC,OAAQ,kBACRC,WAAY,CACR,cACA,cACA,gBACA,cACA,YACA,oBAGR,CACIH,GAAI,EACJC,SACI,qLACJC,OAAQ,YACRC,WAAY,CACR,cACA,cACA,gBACA,cACA,YACA,e,cCnFNC,EAAe,SAACC,GAClB,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACvC,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADH,EAEhB,CAACD,EAAMG,GAAIH,EAAMC,IAAvCD,EAAMC,GAFgC,KAE5BD,EAAMG,GAFsB,OAgFhCI,EA1EE,WAAO,IAAD,EACmBC,mBAAS,GAD5B,mBACZC,EADY,KACCC,EADD,OAEmBF,mBAAS,GAF5B,mBAEZG,EAFY,KAECC,EAFD,OAO2BJ,oBAAS,WAEnD,OADAT,EAAaL,EAAU,GAAGI,YACnBJ,EAAU,MATF,mBAOZmB,EAPY,KAOKC,EAPL,KAwCnB,OAZAC,qBAAU,WACNhB,EAAaL,EAAUe,GAAaX,YAEpCgB,EAAmBpB,EAAUe,MAC9B,CAACA,IASA,qCACI,gDAAmBA,KACnB,0CAAaE,EAAb,OAEA,2CACA,8BAAME,EAAgBjB,WAEtB,0CACCiB,EAAgBf,WAAWkB,KAAI,SAACnB,GAC7B,IAAMoB,EACFJ,EAAgBK,QAAUrB,EACpB,gBACA,SAEV,OACI,mCACI,wBACIsB,UAAWF,EAIXG,QAAS,kBAlDX,SAACvB,GACnBwB,QAAQC,IAAIzB,GACRA,IAAWgB,EAAgBhB,OAC3Ba,GAAe,SAACT,GACZ,IAAMsB,IAAkBtB,EAClBuB,EAAc9B,EAAUQ,OAAS,EAGvC,OAFAmB,QAAQC,IAAIC,GAELA,EAAgBC,EAAc,EAAID,MAG7CT,GAAmB,SAACW,GAAD,mBAAC,eAAeA,GAAhB,IAAsBP,MAAOrB,OAChDe,GAAe,SAACX,GAAD,QAASA,MAsCOyB,CAAc7B,IALjC,SAQKA,GAFIA,EAAOF,aCtCzBgC,MA5Bf,WACI,OACI,qBAAKR,UAAU,MAAf,SACI,yBAAQA,UAAU,aAAlB,UACI,qBAAKS,IAAKC,EAAMV,UAAU,WAAWW,IAAI,SAczC,qBAAKX,UAAU,WAAf,SACI,cAAC,EAAD,MAGJ,qBAAKA,UAAU,oBCjBhBY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.df7daf45.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export const dataArray = [\n    {\n        id: 1,\n        sentence: 'This is ... tree. ...tree is green.',\n        answer: 'a / the ',\n        allAnswers: [\n            'a / the ',\n            'a / a ',\n            'the / the',\n            'the / a',\n            '- / the',\n            'a / -',\n        ],\n    },\n    {\n        id: 2,\n        sentence: 'My friend has no ... bicycle.',\n        answer: '-',\n        allAnswers: ['-', 'a', 'the'],\n    },\n    {\n        id: 3,\n        sentence:\n            '... weather is fine today. ...sky is blue. ...sun is shining brightly.',\n        answer: 'the / the / the',\n        allAnswers: [\n            'the / the / the',\n            'a / the / the',\n            'the / a / the',\n            'the / the / a',\n            'a / a / a',\n            '- / the / the',\n        ],\n    },\n    {\n        id: 4,\n        sentence: 'He likes his ... cat. He gives ... cat ... milk every day.',\n        answer: '- / the / -',\n        allAnswers: [\n            '- / the / -',\n            'a / the / -',\n            'the / the / -',\n            'a / the / a',\n            '- / - / -',\n            'the / the / the',\n        ],\n    },\n    {\n        id: 5,\n        sentence:\n            'About a year ago, just as ... pandemic was hitting New York City, St. John Frizell and his two partners were readying for ... grand reopening of Gage & Tollner, ... newly renovated, 140-year-old restaurant in Downtown Brooklyn.',\n        answer: 'the / the / a',\n        allAnswers: [\n            '- / the / -',\n            'a / the / -',\n            'the / the / a',\n            'a / the / a',\n            '- / - / -',\n            'the / the / the',\n        ],\n    },\n    {\n        id: 6,\n        sentence:\n            'One day before ... March 15 opening — for which ... three partners had spent almost a year and a half preparing — they made ... difficult decision not to open.',\n        answer: 'the / the / the',\n        allAnswers: [\n            '- / the / -',\n            'a / the / -',\n            'the / the / a',\n            'a / the / a',\n            '- / - / -',\n            'the / the / the',\n        ],\n    },\n    {\n        id: 7,\n        sentence:\n            '“I posted something about it in ... local Red Hook group on ... Facebook and got ... big response,” he said. “I thought, OK, I can set this up for all of us.”',\n        answer: 'a / - / a',\n        allAnswers: [\n            '- / the / -',\n            'a / the / -',\n            'the / the / a',\n            'a / the / a',\n            '- / - / -',\n            'a / - / a',\n        ],\n    },\n];\n\nexport default dataArray;\n","import React, { useEffect, useState } from 'react';\nimport { dataArray } from '../../data/exercises-react-sentences.js';\n\nconst shuffleArray = (array) => {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n};\n\nconst Exercise = () => {\n    const [currentStep, setCurrentStep] = useState(0);\n    const [errorNumber, setErrorNumber] = useState(0);\n\n    //why do we need a self invoke anon function here?\n    // everything that should be calculated should be in a function\n\n    const [currentStepData, setCurrentStepData] = useState(() => {\n        shuffleArray(dataArray[0].allAnswers);\n        return dataArray[0];\n    });\n\n    const onAnswerClick = (answer) => {\n        console.log(answer);\n        if (answer === currentStepData.answer) {\n            setCurrentStep((i) => {\n                const newStepNumber = ++i;\n                const stepsLength = dataArray.length - 1;\n                console.log(newStepNumber);\n                // replaced ? 0 : stepsLength with ? 0 : newStepNumber;\n                return newStepNumber > stepsLength ? 0 : newStepNumber;\n            });\n        } else {\n            setCurrentStepData((data) => ({ ...data, error: answer }));\n            setErrorNumber((i) => ++i);\n        }\n    };\n\n    useEffect(() => {\n        shuffleArray(dataArray[currentStep].allAnswers);\n\n        setCurrentStepData(dataArray[currentStep]);\n    }, [currentStep]);\n    // this is a bit deeper than I originally thought. I need to memoize it?\n    // you shuffle the array and what happens next? set the state based on the reshuffle\n\n    // useEffect(() => shuffleArray(currentStepData.allAnswers), [currentStep]);\n\n    // you can use the index when mapping for keys\n\n    return (\n        <>\n            <h2>Current step: {currentStep}</h2>\n            <h2>Errors: {errorNumber} </h2>\n\n            <h4>Question:</h4>\n            <div>{currentStepData.sentence}</div>\n\n            <h4>Answers:</h4>\n            {currentStepData.allAnswers.map((answer) => {\n                const styleClass =\n                    currentStepData.error === answer\n                        ? 'button _error'\n                        : 'button';\n\n                return (\n                    <>\n                        <button\n                            className={styleClass}\n                            //again, here if you don't use a self inv an f, you get 'too many rerenders'\n                            //an example of a closure\n\n                            onClick={() => onAnswerClick(answer)}\n                            key={answer.id}\n                        >\n                            {answer}\n                        </button>\n                    </>\n                );\n            })}\n        </>\n    );\n};\n\nexport default Exercise;\n","import logo from './logo.svg';\nimport './App.css';\nimport React from 'react';\nimport ExercisesReactExerciseComponent from './components/exercises-react-exercise';\nimport Exercise from './components/exercise/exercise.component';\nimport DuplicateExercise from './components/exercise/duplicate-exercise.component';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                {/*\n                <p>\n                    Edit <code>src/App.js</code> and save to reload.\n                </p>\n                <a\n                    className=\"App-link\"\n                    href=\"https://reactjs.org\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    Learn React\n    </a>*/}\n\n                <div className=\"Exercise\">\n                    <Exercise></Exercise>\n                </div>\n\n                <div className=\"twinkling\"></div>\n            </header>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}